// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  USER
  ADMIN
  MODERATOR
}

enum SUBSCRIPTION {
  BASIC
  PREMIUM
}

enum APARTMENTROLE {
  RESIDENT
  OWNER
  SECURITY
  AUTHORITY
}

model User {
  id                String             @id @default(uuid())
  username          String             @unique()
  email             String             @unique()
  phonenumber       String?
  rt_hash           String?
  profilepic        String?
  password_hash     String
  role              ROLE               @default(USER)
  isGoogleId        Boolean            @default(false)
  googleId          String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  verificationToken VerificationToken?
  rooms             Room[] // One-to-many: one user owns many rooms
  apartments        ApartmentUser[] // Many-to-many: user is part of many apartments
  JoinRoom          JoinRoom[]
}

model VerificationToken {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  expiresAt DateTime
  token     String
}

model Room {
  id                 String       @id @default(uuid())
  ownerId            String
  owner              User         @relation(fields: [ownerId], references: [id]) // Room owner
  name               String       @unique()
  address            String
  state              String
  coverpicurl        String
  pincode            String
  registration_num   String       @unique()
  subscription       SUBSCRIPTION @default(BASIC)
  subscriptionStatus Boolean
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  ApartmentUsers ApartmentUser[]
  JoinRoom       JoinRoom[]

  @@index([ownerId])
}

model ApartmentUser {
  id        String        @id @default(uuid())
  userId    String
  user      User          @relation(fields: [userId], references: [id])
  role      APARTMENTROLE @default(RESIDENT)
  flatNo    Int
  roomId    String
  room      Room          @relation(fields: [roomId], references: [id])
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@unique([userId, roomId]) // Ensure no duplicate user/room pairs
  @@index([userId, roomId])
  @@index([userId]) // Optimizing queries based on userId
  @@index([roomId]) // Optimizing queries based on roomId
}

model JoinRoom {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  roomId    String
  room      Room     @relation(fields: [roomId], references: [id])
  expiresOn DateTime
  token     String
  createdAt DateTime @default(now())

  @@unique([userId, roomId]) // Prevent multiple entries for the same user/room
  @@index([userId]) // Optimizing queries based on userId
  @@index([roomId]) // Optimizing queries based on roomId
}



